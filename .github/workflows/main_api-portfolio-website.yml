
name: Build and deploy ASP.Net Core app to Azure Web App - api-portfolio-website

on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  # Name of this job
  test:

# Which OS should this run on
    runs-on: windows-latest

# The actual instruction you give the machine to execute
    steps:
    # download your source code- equivalent to your git clone command
    - uses: actions/checkout@v3
      with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    # download .NET SDK to your runner
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
          java-version: 17
          distribution: 'zulu' # 
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    # equivalent to doing dotnet restore in your commandline
    # dotnet restore will download all your dependencies and make sure all your project references are correctly configured
    # equivalent to doing npm install
    - name: Restore dependencies
      run: dotnet restore ./portfolio_controllers/portfolio_website.csproj
    # equivalent to you doing dotnet build
    - name: Build
      run: dotnet build --no-restore ./portfolio_controllers/portfolio_website.csproj
    # running dotnet test
    - name: Test
      run: dotnet test --no-build --verbosity normal ./portfolio_controllers/portfolio_website.csproj --collect:"XPlat Code Coverage" --logger trx -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"markcmoore_portfolio-dotnet-webapi" /o:"markcmoore" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
        dotnet build --no-restore portfolio_controllers/portfolio_website.csproj
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  
  build:
    runs-on: windows-latest    
    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.x'
          include-prerelease: true
          
      - name: Build with dotnet
        run: dotnet build ./portfolio_controllers/portfolio_website.csproj --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp
        
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
      
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'api-portfolio-website'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_55E462089B5C4DCCACD5F6FCC22F6FA2 }}
          package: .
            
            
            
            # jobs:
              #   build:
#     name: Build and analyze
#     runs-on: windows-latest    
#     steps:
#       - name: Set up .NET Core
#         uses: actions/setup-dotnet@v1
#         with:
  #           dotnet-version: '7.x'
  #           include-prerelease: true
  #       - name: Set up JDK 17
  #         uses: actions/setup-java@v3
  #         with:
    #           java-version: 17
    #           distribution: 'zulu' # 
    #       - uses: actions/checkout@v2
    #         with:
      #           fetch-depth: 0
      #       - name: Cache SonarCloud packages
      #         uses: actions/cache@v3
      #         with:
        #           path: ~\sonar\cache
        #           key: ${{ runner.os }}-sonar
        #           restore-keys: ${{ runner.os }}-sonar      
        #       - name: Cache SonarCloud scanner
        #         id: cache-sonar-scanner
        #         uses: actions/cache@v3
        #         with:
          #           path: .\.sonar\scanner
          #           key: ${{ runner.os }}-sonar-scanner
          #           restore-keys: ${{ runner.os }}-sonar-scanner
          #       - name: Install SonarCloud scanner
          #         if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
          #         shell: powershell
          #         run: |
          #           New-Item -Path .\.sonar\scanner -ItemType Directory
          #           dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          #       - name: Build and analyze
          #         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         shell: powershell
#         run: |
#           .\.sonar\scanner\dotnet-sonarscanner begin /k:"markcmoore_portfolio-dotnet-webapi" /o:"{output}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
#           dotnet build {the path to the SLN file in the project}
#           .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
#       - name: dotnet publish
#         run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp    
#       - name: Upload artifact for deployment job
#         uses: actions/upload-artifact@v2
#         with:
  #           name: .net-app
  #           path: ${{env.DOTNET_ROOT}}/myapp          
  #   deploy:
    #     runs-on: windows-latest
    #     needs: build
    #     environment:
      #       name: 'Production'
      #       url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
      
      #     steps:
        #       - name: Download artifact from build job
        #         uses: actions/download-artifact@v2
        #         with:
          #           name: .net-app        
          #       - name: Deploy to Azure Web App
          #         id: deploy-to-webapp
          #         uses: azure/webapps-deploy@v2
          #         with:
            #           app-name: 'api-portfolio-website'
            #           slot-name: 'Production'
            #           publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_55E462089B5C4DCCACD5F6FCC22F6FA2 }}
            #           package: .
            
            
            # .\.sonar\scanner\dotnet-sonarscanner begin /k:"markcmoore_portfolio-dotnet-webapi" /o:"markcmoore" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**\coverage.opencover.xml"
            # echo building project
            # dotnet test ./portfolio_website_testing/portfolio_website_testing.csproj `
            # --collect "Code Coverage" `
            # --results-directory TestResults/ `
            # --logger "trx;LogFileName=unittests.trx" `
            # --configuration release `
            # --DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
            # .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
            
            
            # SonarScanner.MSBuild.exe begin /k:"markcmoore_portfolio-dotnet-webapi" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" 
            # dotnet build --no-incremental
            # dotnet test --collect "Code Coverage"
            # SonarScanner.MSBuild.exe end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
            
                    
          # dotnet build
          # dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
          # dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          

          # dotnet sonarscanner begin /k:"markcmoore_portfolio-dotnet-webapi" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          # dotnet build --no-incremental
          # dotnet-coverage collect "dotnet test ./portfolio_website_testing/portfolio_website_testing.csproj" -f xml -o "coverage.xml"
          # dotnet sonarscanner end /d:sonar.token="<sonar-token>"
          # dotnet test ./portfolio_website_testing/portfolio_website_testing.csproj
          # dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          
          
          #dotnet test portfolio_website_testing/portfolio_website_testing.csproj" -f xml -o "coverages/coverage.xml"
          
          
          # dotnet sonarscanner begin /k:"markcmoore_portfolio-dotnet-webapi" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.vscoveragexml.reportsPaths="coverages/coverage.xml"
          # dotnet build portfolio_controllers/portfolio_website.csproj
          # dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
          # name: Build and deploy ASP.Net Core app to Azure Web App - api-portfolio-website
          
          # on:
          #   push:
          #     branches:
          #       - main
          #   workflow_dispatch:
          
          # jobs:
          #   test:
          #     name: Build, analyze, and test
          #     runs-on: windows-latest
          #     steps:
          #       - name: Set up JDK 17
          #         uses: actions/setup-java@v3
          #         with:
          #           java-version: 17
          #           distribution: 'zulu' # Alternative distribution options are available.
          #       - uses: actions/checkout@v3
          #         with:
          #           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          #       - name: Cache SonarCloud packages
          #         uses: actions/cache@v3
          #         with:
          #           path: ~\sonar\cache
          #           key: ${{ runner.os }}-sonar
          #           restore-keys: ${{ runner.os }}-sonar
          #       - name: Cache SonarCloud scanner
          #         id: cache-sonar-scanner
          #         uses: actions/cache@v3
          #         with:
          #           path: .\.sonar\scanner
          #           key: ${{ runner.os }}-sonar-scanner
          #           restore-keys: ${{ runner.os }}-sonar-scanner
          #       - name: Install SonarCloud scanner
          #         if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
          #         shell: powershell
          #         run: |
          #           New-Item -Path .\.sonar\scanner -ItemType Directory
          #           dotnet tool install --global coverlet.console
          #       - name: Build and analyze
          #         env:
          #           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          #           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          #         shell: powershell
          #         run: |
          #           dotnet sonarscanner begin /k:"markcmoore_portfolio-dotnet-webapi"`
          #           /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
          #           /d:sonar.cs.opencover.reportsPaths=report.coveragexml
          #           dotnet build --no-incremental
          #           coverlet .\CovExample.Tests\bin\Debug\net7.0\CovExample.Tests.dll
          #           --target "dotnet" 
          #           --targetargs "test --no-build"
          #           -f=opencover 
          #           -o="coverage.xml"
          #           dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"